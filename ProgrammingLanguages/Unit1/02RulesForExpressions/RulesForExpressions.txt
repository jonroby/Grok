*Expressions*

We have seen many kinds of expressions:
34 true false x e1+e2 e1<e2
if e1 then e2 else e3

Can get arbitrarily large since any sub expression can contain subsubexpressions.

Every kind of expression has
Syntax
Type-checking rules
    - Produces a type or fails (with a bad error message)
    - Types so far: int bool unit
Evaluation rules (used only on things that type-check)
    - Produces a value (or exception or infinite loop)

*Variables*

Syntax:
    sequence of letters, digits, _, not starting with a digit

Type-checking:
    Look up type in current static environment
        - If not there, fail

Evaluation:
    Look up value in current dynamic environment

*Addition*

Syntax:
    e1 + e2 where e1 and e2 are expressions

Type-checking:
    If e1 and e2 have type int,
    then e1 + e2 has type int

Evaluation:
    If e1 evaluates to v1 and e2 evaluates to v2,
    then e1 + e2 evaluates to sum of v1 and v2.

*Values*

All values are expressions

Not all expressions are values

Every value "evaluates to itself" in "zero steps"

Examples:
    34, 17, 42 have type int
    true, false have type bool
    () has type unit

*Conditional*

Syntax:
    if e1 then e2 else e3
    where if, then, and else are keywords and
    e1, e2, and e3 are subexpressions

Type-checking:
    first e1 must have type bool
    e2 and e3 can have any type (say t), but they must have same type t
    the type of the entire expression is also t

Evaluation:
    first evaluate e1 to a value call it v1
    if it's true, evaluate e2 and that result is the whole expression's result
    else, evaluates e3 and that result is the whole expression result.
