old way to get the effect of multiple arguments:

fun sorted3_tupled (x,y,z) = z >= y andalso y >= x
val t1 = sorted3_tupled (7,9,11)

new way:

if you leave spaces between args, it works like Haskell


fun sorted3_nicer x y z = z >= y and also y >= x

val t4 = sorted3_nicer 7 9 11

fun fold f acc xs =
  case xs of
      []    => acc
    | x::xs => fold f (f(acc,x)) xs

fun sum xs = fold (fn (x,y) => x + y) 0 xs

Note that foldl in ML standard library has f take arguments in
the opposite order

