Functional programming can mean a few different things:

1) Avoiding mutation in most/all cases
2) Using functions as values

Function as first-class values

fun double x = 2 * x
fun incr x = x + 1
val a_tuple = (double, incr, double(incr 7))
val eighteen = (#1 a_tuple) 9

First class functions: Can use them wherever we use values.
- Functions are values too.
- Arguments, results, parts of tuples, bound to variables,
  carried by datatype constructors or exceptions.

fun double x = 2 * x
fun incr x = x + 1
val a_tuple = (double, incr, double(incr 7))

Most common use is as an argument / result of another function
- Other function is called a higher-order function
- Powerful way to factor out common functionality

Function closure: Function can use bindings from outside the
function definition (in scope where function is defined)
- Makes first-class functions much more powerful.
- Will get to this feature in a bit.

Distinction between terms first-class functions and function
closures is not universally understood.
- Important conceptual distinction even if terms get muddled.


