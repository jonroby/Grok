fold is another very famous iterator over recursive structures

fold (f,acc,[x1,x2,x3,x4]) computes
f(f(f(f(acc,x1),x2),x3),x4)

fun fold (f,acc,xs) =
  case xs of
      []    => acc
    | x::xs => fold (f, f(acc,x), xs)

- This version folds left; another version folds right
- Whether the distinction matters depends on f (often not)
"foldr can't be quite as tail-recursive"

val fold = fn : ('a * 'b -> 'a) * 'a * 'b list -> 'a

This pattern separates recursive traversal from data processing.
- Can use same traversal for different data processing.
- Can reuse same data processing for different data structures.
- In both cases, using common vocabularly concisely communicates
  intent.
