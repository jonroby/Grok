Which is faster? Currying or tupling?

- They're both constant time operations so it doesn't matter in
  most of your code -- plenty fast.
  - Don't program against an implementation until it matter!

For the small (zero?) part where efficiency matters:
  - It turns out SML/NJ compiles tuples more efficiently
  - But many other functional language implementations do
    better with currying (OCaml, Haskell, F#)
  - So currying is the normal thing and programmers read
    t1 -> t2 -> t3 -> t4 as 3 argument function that also
    allows partial application.


