*Function definitions*

Functions: the most important building block in the whole course
- Like Java methods, have arguments and result
- But no classes, this, return, etc.

*Some gotchas*

Three common "gotchas"

Bad error messages if you mess up function-argument syntax

The use of * in type syntax is not multiplication
- Example: int * int -> int
- In expressions, * is multiplication: x * pow(x, y-1)

Cannot refer to later function bindings
- That's simply ML's rule
- Helper functions must come before their uses
- Need special construct for mutual recursion (later)

*Recursion*

Will use for most functions taking or returning lists

Makes sense because calls to same function solve simpler problems

Recursion more powerful than loops
- We won't use a single loop in ML
- Loops often (not always) obscure simple, elegant solutions
