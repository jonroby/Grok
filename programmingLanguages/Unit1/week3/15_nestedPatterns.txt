We can nest patterns as deep as we want
- Just like we can nest expressions as deep as we want
- Often avoids hard to read wordy nested case expressions.

fun zip3 list_triple =
  case list_triple of
      ([], [], []) => []
    | (hd1::tl1,hd2::tl2,hd3::tl3) => (hd1,hd2,hd3)::zip(tl1,tl2,tl3)
    | _ => raise ListLengthMismatch

fun unzip3 lst =
  case lst of
      [] => ([], [], [])
    | (a,b,c)::tl => let val (l1,l2,l3) = unzip tl
      		     in
		       (a::l1,b::l2,c::l3)
		     end
