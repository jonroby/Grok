datatype my_int_list = Empty
	 	     | Cons of int * my_int_list

val x = Cons(4, Cons(23,Cons(2008,Empty)))

fun append_my_list (xs, ys) =
  case xs of
      Empty => ys
    | Cons(x,xs') => Cons(x, append_my_list(xs',ys))

Options are datatypes.

Options are just predefined datatype bindings.
- NONE and SOME are constructors, not just functions
- So use pattern matching not isSome and valOf

fun inc_or_zero intoption =
  case intoption of
      NONE => 0
    | SOME i => i+1

Lists are datatypes too.

Do not use hd, tl, or null either.
- [] and :: are constructors too
- (strange syntax, particularly infix)

fun sum_list xs =
  case xs of
      [] => 0
    | x::xs => x + sum_list xs

fun append (xs,ys) =
  case xs of
      [] => ys
    | x::xs => x :: append(xs,ys)

Why pattern matching?
- No missing cases. No exceptions for wrong variant.

We just learned the other way for pedagogy.
- Do not use isSome, valOf, null, hd, tl on Homework2.

So why are null, tl, etc. predefined?
- For passing as arguments to other functions (next week)
- Because sometimes they are convenient
- Easy to define, you could do so, but now everything is consistent
