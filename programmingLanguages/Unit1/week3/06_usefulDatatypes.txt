Enumerations:

datatype suit = Club | Diamond | Heart | Spade
datatype rank = Jack | Queen | King | Ace | Num of int

Alternate ways:

data type id = StudentNum of int
     	     | Name of string
	               * (string option)
		       * string

Try doing the same thing with an each-of type (DON'T DO THIS):

(* use the student_num and ignore other fields unless student_num
is ~1 *)
{ student_num : int option
  first	      : string,
  middle      : string option,
  last	      : string }

This approach gives up all the benefits of the language enforcing
every value is one variant, you don't forget branches, etc.

And it makes it less clear what you're doing.

Expression trees
datatype exp = Constant of int
	     | Negate 	of exp
	     | Add 	of exp * exp
	     | Multiply	of exp * exp

An expression in ML of type exp:
   Add (Constant (10+9), Negate (Constant 4))

       		 Add
	Constant      Negate
	   19        Constant
	   	        4

fun eval e =
    case e of
         Constant i      => i
       | Negate e2       => ~ (eval e2)
       | Add(e1,e2)      => (eval e1) + (eval e2)
       | Multiply(e1,e2) => (eval e1) * (eval e2)


